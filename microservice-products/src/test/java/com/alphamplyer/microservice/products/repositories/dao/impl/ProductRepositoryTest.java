package com.alphamplyer.microservice.products.repositories.dao.impl;

import com.alphamplyer.microservice.products.ResetDatabase;
import com.alphamplyer.microservice.products.models.Product;
import com.alphamplyer.microservice.products.models.ProductStatus;
import com.alphamplyer.microservice.products.repositories.dao.interf.IProductRepository;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(SpringExtension.class)
@SpringBootTest
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class ProductRepositoryTest {

    @Autowired
    private IProductRepository productRepository;

    private Product prepareProduct(String code) {
        Product product = new Product();

        product.setTypeId(1);
        product.setImage_id(1);
        product.setUnitByUser(-1);
        product.setPrice(10.0);
        product.setCode(code);
        product.setName("Test Product Autogenerated name");
        product.setDescription("Test Product autogenerated description");
        product.setStatus(ProductStatus.AVAILABLE);
        product.setGameContent(false);
        product.setRenewal(false);
        product.setAvailableFrom(new Timestamp(new GregorianCalendar(2019, Calendar.SEPTEMBER, 1).getTimeInMillis()));
        product.setAvailableTo(null);

        return product;
    }

    @BeforeAll
    static void resetDatabase() {
        try {
            ResetDatabase.reset("src/test/resources/resetProductTestDatabase.sql");
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("========= FAILED RESET DATABASE ==========");
            e.printStackTrace();
        }
    }

    @Test
    @Order(1)
    void getByID() {
        Product product = productRepository.getByID(1, true, true);
        assertNotNull(product);
        assertEquals(9.99, product.getPrice());

        product = productRepository.getByID(2, true, true);
        assertNotNull(product);
        assertEquals(39.5, product.getPrice());

        product = productRepository.getByID(3, true, true);
        assertNotNull(product);
        assertEquals(25, product.getPrice());

        product = productRepository.getByID(4, true, true);
        assertNotNull(product);
        assertEquals(7.5, product.getPrice());
    }

    @Test
    @Order(2)
    void getByCode() {
        Product product = productRepository.getByCode("TEST-00001", true, true);
        assertNotNull(product);
        assertEquals(9.99, product.getPrice());

        product = productRepository.getByCode("TEST-00002", true, true);
        assertNotNull(product);
        assertEquals(39.5, product.getPrice());

        product = productRepository.getByCode("GAME-00001", true, true);
        assertNotNull(product);
        assertEquals(25, product.getPrice());

        product = productRepository.getByCode("GAME-00002", true, true);
        assertNotNull(product);
        assertEquals(7.5, product.getPrice());
    }

    @Test
    @Order(3)
    void getAll() {
        List<Product> products = productRepository.getAll(0, 0, true, true);
        assertNotNull(products);
        assertEquals(8, products.size());

        products = productRepository.getAll(2, 0, true, true);
        assertNotNull(products);
        assertEquals(6, products.size());

        products = productRepository.getAll(0, 3, true, true);
        assertNotNull(products);
        assertEquals(3, products.size());

        products = productRepository.getAll(1, 4, true, true);
        assertNotNull(products);
        assertEquals(4, products.size());
    }

    @Test
    @Order(4)
    void getAllByType() {
        List<Product> products = productRepository.getAllByType(1, 0, 0, true, true);
        assertNotNull(products);
        assertEquals(4, products.size());
    }

    @Test
    @Order(5)
    void add() {
        Product product = prepareProduct("TEST-00003");
        Product db_product = productRepository.add(product);
        assertNotNull(db_product);

        assertNotNull(product.getId());
        assertEquals(product.getTypeId(), db_product.getTypeId());
        assertEquals(product.getImage_id(), db_product.getImage_id());
        assertEquals(product.getUnitByUser(), db_product.getUnitByUser());
        assertEquals(product.getPrice(), db_product.getPrice());
        assertEquals(product.getCode(), db_product.getCode());
        assertEquals(product.getName(), db_product.getName());
        assertEquals(product.getDescription(), db_product.getDescription());
        assertEquals(product.getStatus(), db_product.getStatus());
        assertEquals(product.getGameContent(), db_product.getGameContent());
        assertEquals(product.getRenewal(), db_product.getRenewal());
        assertEquals(product.getAvailableFrom(), db_product.getAvailableFrom());
        assertNull(db_product.getAvailableTo());
    }

    @Test
    @Order(6)
    void save() {
        Product product = productRepository.getByID(9, true, true);
        assertNotNull(product);

        product.setPrice(5.0);
        product.setName("Other name");
        product.setDescription(null);
        product.setGameContent(true);

        productRepository.save(product);
        Product db_product = productRepository.getByID(9, true, true);

        assertNotNull(db_product);
        assertEquals(product.getPrice(), db_product.getPrice());
        assertEquals(product.getName(), db_product.getName());
        assertEquals(product.getDescription(), db_product.getDescription());
        assertEquals(product.getGameContent(), db_product.getGameContent());
    }

    @Test
    @Order(7)
    void delete() {
        productRepository.delete(9);
        Product product = productRepository.getByID(9, true, true);
        assertNull(product);
    }
}